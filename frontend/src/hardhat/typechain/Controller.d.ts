/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface ControllerInterface extends ethers.utils.Interface {
  functions: {
    "addMinter(address[])": FunctionFragment;
    "removeMinter(address[])": FunctionFragment;
    "setController(address)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "addMinter", values: [string[]]): string;
  encodeFunctionData(
    functionFragment: "removeMinter",
    values: [string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [string]
  ): string;

  decodeFunctionResult(functionFragment: "addMinter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeMinter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;

  events: {};
}

export class Controller extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: ControllerInterface;

  functions: {
    addMinter(
      _minters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    removeMinter(
      _minters: string[],
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    setController(
      _newController: string,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  addMinter(
    _minters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  removeMinter(
    _minters: string[],
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  setController(
    _newController: string,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  staticCall: {
    addMinter(_minters: string[], overrides?: Overrides): Promise<void>;

    removeMinter(_minters: string[], overrides?: Overrides): Promise<void>;

    setController(_newController: string, overrides?: Overrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    addMinter(_minters: string[]): Promise<BigNumber>;
    removeMinter(_minters: string[]): Promise<BigNumber>;
    setController(_newController: string): Promise<BigNumber>;
  };

  populateTransaction: {
    addMinter(_minters: string[]): Promise<PopulatedTransaction>;
    removeMinter(_minters: string[]): Promise<PopulatedTransaction>;
    setController(_newController: string): Promise<PopulatedTransaction>;
  };
}
